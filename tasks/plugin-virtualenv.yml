---

- name: VirtualEnv | Cloning/Updating
  git:
    repo: "{{ repo_virtualenv }}"
    dest: "{{ shell_home_dir.stdout }}/{{ pyenv_main_dir }}/plugins/pyenv-virtualenv"
    clone: yes
    update: no
    force: no
    recursive: false

- name: VirtualEnv | Ensure shell profiles are configured
  lineinfile:
    dest: "{{ shell_home_dir.stdout }}/{{ item.filename }}"
    regexp: "{{ shell_home_dir.stdout }}/{{ pyenv_main_dir }}/{{ pyenv_bin_path }}/{{ pyenv_main_exec }} virtualenv-init -"
    line: "eval \"$({{ shell_home_dir.stdout }}/{{ pyenv_main_dir }}/{{ pyenv_bin_path }}/{{ pyenv_main_exec }} virtualenv-init -)\""
    state: present
  with_items: "{{ shell_profiles }}"
  ignore_errors: yes
  when: shell_profiles is defined

- name: VirtualEnv | Get list of virtual environments
  shell: "{{ pyenv_symlink_exec }} virtualenvs"
  register: virtualenv_versions
  changed_when: false

- name: VirtualEnv | Get current version information
  shell: "{{ pyenv_symlink_exec }} virtualenvs | grep '*'"
  register: virtualenv_current_version
  failed_when: false
  changed_when: false

- name: VirtualEnv | Setup virtualenvs list
  set_fact:
    virtualenvs:
      - name: "Global-{{ python_version }}"
        version: "{{ python_version }}"
  when: virtualenvs is undefined

- name: VirtualEnv | Setup default virtualenv
  set_fact:
    virtualenv: "Global-{{ python_version }}"
  when: virtualenv is undefined

- name: VirtualEnv | Switching Python back to system
  shell: "{{ pyenv_symlink_exec }} global system"
  changed_when: false

- name: VirtualEnv | Install virtual environment(s)
  shell: "{{ pyenv_symlink_exec }} virtualenv {{ item.version }} {{ item.name }}"
  with_items: "{{ virtualenvs }}"
  when: item.name not in virtualenv_versions.stdout

- name: VirtualEnv | Set virtual environment to default
  shell: "{{ pyenv_symlink_exec }} global {{ virtualenv }}"
  with_items: "{{ virtualenvs }}"
  when: item.name not in virtualenv_current_version.stdout_lines and item.name not in virtualenv_versions.stdout

- name: VirtualEnv | Fetch virtualenv installation(s)
  shell: "{{ pyenv_symlink_exec }} virtualenvs"
  register: virtualenv_current_version_after_role
  changed_when: false

- name: VirtualEnv | Assert virtualenv installation(s)
  assert:
    that: item.name in virtualenv_current_version_after_role.stdout
  with_items: "{{ virtualenvs }}"
  changed_when: false

- name: VirtualEnv | Restart shell
  shell: "source {{ shell_home_dir.stdout }}/{{ item.filename }}"
  with_items: "{{ shell_profiles }}"
  failed_when: false
  when:
    - shell_profiles is defined
    - item.name not in virtualenv_versions.stdout